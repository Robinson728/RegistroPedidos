@page "/rOrdenes"
@page "/rOrdenes/{OrdenId:int}"

@using RegistroPedidos.Models;
@using RegistroPedidos.BLL;
@inject IToastService toast   

<EditForm Model="ordenes" OnValidSubmit="Guardar">
    <DataAnnotationsValidator/>
    <div class="card">

        <div class="card-header">
            <h2>Registro Pedidos</h2>
        </div>

        <div class="card-body">
            <form>
                <div class="form-row align-items-center">
                    <div class="col">
                        <div class="form-group">
                            <label>Orden Id</label>
                            <div class="input-group">
                                <InputNumber @bind-Value="ordenes.OrdenId" class="form-control" col-4 />
                                <div class="input-group-append">
                                    <button type="button" class="btn btn-primary input-group-text" @onclick="Buscar"><i class="oi oi-magnifying-glass"/></button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <label>Fecha Pedido</label>
                    <InputDate @bind-Value="ordenes.Fecha" class="form-control" readonly="true"/>
                </div>

                <div class="form-group">
                    <label>Suplidor</label>
                    <InputSelect @bind-Value="ordenes.SuplidorId" class="form-control">
                        @foreach (var item in listasuplidores)
                        {
                            <option value="@item.SuplidorId">@item.Nombres</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => ordenes.SuplidorId)"/>
                </div>

                <div class="form-group">
                    <label>Monto</label>
                    <InputNumber @bind-Value="ordenes.Monto" class="form-control" readonly="true"/>
                </div>

            </form>
        </div>
    </div>

    <div class="card">

        <div class="card-header">
            <h4>Detalle</h4>
        </div>

        <div class="card-body">

            <div class="row">
                <div class="col form-group">
                    <label>Producto</label>
                    <InputSelect @bind-Value="detalle.ProductoId" class="form-control">
                        @foreach (var item in listaProductos)
                        {
		                        <option value="@item.ProductoId">@item.Descripcion</option>
                        }
                    </InputSelect>
                </div>

                <div class="col form-group">
                    <label>Costo</label>
                    <InputNumber @bind-Value="productos.Costo" class="form-control" readonly/>
                </div>

                <div class="col form-group">
                    <label>Cantidad</label>
                    <input type="number" @bind="cantidad" class="form-control" id="inputCantidad" @oninput="GetTotal"/>
                </div>

                <div class="col form-group">
                    <label>Total</label>
                    <div class="input-group">
                        <InputNumber @bind-Value="total" class="form-control" readonly/>
                        <div class="input-group-append">
                            <button type="button" class="btn btn-success input-group-text" @onclick="Agregar"><i class="oi oi-plus mr-2"/></button>
                        </div>
                    </div>
                </div>
            </div>

            <div class="table-responsive text-nowrap" style="position:relative; height:200px; overflow; grid-auto-columns; display:block;">
                <table class="table table-striped">
                    <thead class="thead-light">
                        <tr>
                            <td>Producto Id</td>
                            <td>Descripci&oacute;n</td>
                            <td>Costo</td>
                            <td>Cantidad</td>
                            <td>Total</td>
                        </tr>
                    </thead>

                    <tbody class="bg-white">
                        @foreach (var item in ordenes.Detalle)
                        {
                            <tr>
                                <td>@item.ProductoId</td>
                                <td>@item.DetallesProducto.Descripcion</td>
                                <td>@item.DetallesProducto.Costo</td>
                                <td>@item.Cantidad</td>
                                <td>@item.Costo</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <div class="card-footer">
            <div class="form-group text-center" display: inline-block>
                <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo"><i class="oi oi-file mr-2"/>Nuevo</button>
                <button type="submit" class="btn btn-lg btn-success"><i class="oi oi-account-login mr-2" style="transform: rotate(90deg)"/>Guardar</button>
                <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar"><i class="oi oi-trash mr-2"/>Eliminar</button>
            </div>
        </div>

    </div>
</EditForm>  

@code {
        [Parameter]
        public int OrdenId { get; set; }

    private Ordenes ordenes = new Ordenes();
    private Suplidores suplidores = new Suplidores();
    private OrdenesDetalle detalle = new OrdenesDetalle();
    private Productos productos = new Productos();
    private List<Productos> listaProductos = new List<Productos>();
    private List<Suplidores> listasuplidores = new List<Suplidores>();

    private int cantidad = 0;
    private double total = 0;

    protected override void OnInitialized()
    {
        Nuevo();
    }

    private void GetTotal()
    {
        total = productos.Costo * detalle.Cantidad;
    }

    private void Limpiar()
    {
        ordenes = new Ordenes();
        suplidores = new Suplidores();
        productos = new Productos();
        detalle = new OrdenesDetalle();
        listasuplidores = SuplidoresBLL.GetList(r => true);
        listaProductos = ProductosBLL.GetList(r => true);
        cantidad = 0;
        total = 0;
    }

    public void Buscar()
    {
        if (ordenes.OrdenId > 0)
        {
            var encontrado = OrdenesBLL.Buscar(ordenes.OrdenId);

            if (encontrado != null)
                this.ordenes = encontrado;
            else
                toast.ShowWarning("No encontrado.");
        }
    }

    public void Agregar()
    {
        @*var prestamo = PrestamosBLL.Buscar(prestamoSeleccionado);
        var persona = PersonasBLL.Buscar(prestamo.PersonaId);

        moras.Detalle.Add(new MorasDetalle
        {
            MoraId = moras.MoraId,
            PrestamoId = prestamoSeleccionado,
            Valor = monto
        });

        moras.Total += monto;
        personas.Balance += monto;
        prestamos.Balance += monto;
        PersonasBLL.Guardar(personas);
        PrestamosBLL.Guardar(prestamos);
        Nuevo();*@

        ordenes.Detalle.Add(new OrdenesDetalle
        {
            ProductoId = productos.ProductoId,
            Cantidad = cantidad,
            Costo = total
        });
        ordenes.Monto += total;
        Nuevo();
    }

    public void Nuevo()
    {
        Limpiar();
    }

    public void Guardar()
    {
        var guardar = OrdenesBLL.Guardar(ordenes);

        if (guardar)
        {
            Nuevo();
            toast.ShowInfo("Guardado Correctamente.");
        }
        else
            toast.ShowError("No fue posible guardar");
    }

    public void Eliminar()
    {
        var encontrado = OrdenesBLL.Buscar(ordenes.OrdenId);

        if (encontrado != null)
        {
            Nuevo();
            toast.ShowSuccess("Eliminado Correctamente.");
        }
        else
            toast.ShowError("No fue posible eliminar.");
    }
}